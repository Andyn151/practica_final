apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-php
  labels:
    app: php
spec:
  replicas: 1
  selector:
    matchLabels:
      app: php
  template:
    metadata:
      labels:
        app: php
    spec:
      initContainers:
      - name: copy-data
        image: "{{ .Values.php.image.repository }}:{{ .Values.php.image.tag }}"
        command: ["/bin/sh", "-c"]
        args:
        - |
          cp -R /var/www/* /mnt/www && \
          chown -R www-data:www-data /mnt/www && \
          chmod -R 775 /mnt/www
          composer install --working-dir=/mnt/www
          node -v && npm -v npm install && npm run build
        volumeMounts:
        - name: php-code
          mountPath: /mnt/www
      containers:
      - name: php
        image: "{{ .Values.php.image.repository }}:{{ .Values.php.image.tag }}"
        ports:
        - containerPort: {{ .Values.php.port }}
        volumeMounts:
        - name: php-code
          mountPath: /var/www
        command: ["/bin/sh", "-c"]
        args:
        - |
          php-fpm
      volumes:
      - name: php-code
        persistentVolumeClaim:
          claimName: php-storage
        
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-nginx
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: "{{ .Values.nginx.image.repository }}:{{ .Values.nginx.image.tag }}"
        imagePullPolicy: "{{ .Values.nginx.image.pullPolicy }}"
        ports:
        - containerPort: {{ .Values.nginx.port }}
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        - name: nginx-main-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: project-code
          mountPath: /var/www
      volumes:
      - name: nginx-config
        configMap:
          name: {{ .Release.Name }}-nginx-config
      - name: nginx-main-config
        configMap:
          name: {{ .Release.Name }}-nginx-main-config
      - name: project-code
        persistentVolumeClaim:
          claimName: php-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-db
  labels:
    app: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
      - name: db
        image: "{{ .Values.db.image.repository }}:{{ .Values.db.image.tag }}"
        ports:
        - containerPort: {{ .Values.db.port }}
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: {{ .Values.db.environment.MYSQL_ROOT_PASSWORD }}
        - name: MYSQL_DATABASE
          value: {{ .Values.db.environment.MYSQL_DATABASE }}
        - name: MYSQL_USER
          value: {{ .Values.db.environment.MYSQL_USER }}
        - name: MYSQL_PASSWORD
          value: {{ .Values.db.environment.MYSQL_PASSWORD }}
        volumeMounts:
        - name: db-data
          mountPath: /var/lib/mysql
      volumes:
      - name: db-data
        persistentVolumeClaim:
          claimName: mysql-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-phpmyadmin
  labels:
    app: phpmyadmin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: phpmyadmin
  template:
    metadata:
      labels:
        app: phpmyadmin
    spec:
      initContainers:
      - name: fix-sessions-permissions
        image: "{{ .Values.phpmyadmin.image.repository }}:{{ .Values.phpmyadmin.image.tag }}"
        command: ["chmod"]
        args: ["777", "/sessions"]
        volumeMounts:
        - name: phpmyadmin-sessions
          mountPath: /sessions
      containers:
      - name: phpmyadmin
        image: "{{ .Values.phpmyadmin.image.repository }}:{{ .Values.phpmyadmin.image.tag }}"
        imagePullPolicy: {{ .Values.phpmyadmin.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.phpmyadmin.port }}
        env:
        - name: PMA_HOST
          value: "{{ .Values.phpmyadmin.environment.PMA_HOST }}"
        - name: PMA_PORT
          value: "{{ .Values.phpmyadmin.environment.PMA_PORT }}"
        - name: PMA_ARBITRARY
          value: "{{ .Values.phpmyadmin.environment.PMA_ARBITRARY }}"
        volumeMounts:
        - name: phpmyadmin-sessions
          mountPath: /sessions
      volumes:
      - name: phpmyadmin-sessions
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-adminer
  labels:
    app: adminer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: adminer
  template:
    metadata:
      labels:
        app: adminer
    spec:
      containers:
      - name: adminer
        image: "{{ .Values.adminer.image.repository }}:{{ .Values.adminer.image.tag }}"
        imagePullPolicy: {{ .Values.adminer.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.adminer.port }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-redis
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: "{{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}"
        ports:
        - containerPort: {{ .Values.redis.port }}
        command:
        - "redis-server"
        args:
        - "--appendonly"
        - "yes"
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data